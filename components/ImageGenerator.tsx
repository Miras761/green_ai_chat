import React, { useState } from 'react';
import { generateImage } from '../services/geminiService';
import Spinner from './Spinner';
import { ImageIcon, SparklesIcon } from './IconComponents';

const ImageGenerator: React.FC = () => {
  const [prompt, setPrompt] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);

  const handleGenerate = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim() || isLoading) return;

    setIsLoading(true);
    setError(null);
    setGeneratedImage(null);

    try {
      const imageUrl = await generateImage(prompt);
      if (imageUrl.startsWith('data:image')) {
        setGeneratedImage(imageUrl);
      } else {
        setError(imageUrl);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center h-full p-4 md:p-8 bg-[#ECFDF5]/50 dark:bg-gray-800/50">
      <div className="w-full max-w-2xl text-center">
        <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[#065F46] to-[#10B981] dark:from-[#34D399] dark:to-[#A7F3D0] mb-2">
          Image Generation Studio
        </h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          Describe the image you want to create. Let your imagination flow!
        </p>

        <form onSubmit={handleGenerate} className="flex items-center gap-2 p-2 bg-white dark:bg-gray-900 rounded-full border border-gray-200 dark:border-gray-700 shadow-lg focus-within:ring-2 focus-within:ring-[#10B981] transition-shadow mb-8">
          <input
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., A friendly green robot teaching in a futuristic classroom"
            className="flex-1 w-full px-4 py-3 bg-transparent focus:outline-none"
            disabled={isLoading}
          />
          <button
            type="submit"
            disabled={isLoading || !prompt.trim()}
            className="flex items-center gap-2 px-6 py-3 rounded-full bg-gradient-to-br from-[#10B981] to-[#059669] text-white font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:from-[#059669] hover:to-[#10B981] transition-all duration-300 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#34D399] dark:focus:ring-offset-gray-900"
          >
            {isLoading ? <Spinner className="w-5 h-5"/> : <SparklesIcon className="w-5 h-5"/>}
            <span>Generate</span>
          </button>
        </form>

        <div className="w-full h-80 bg-white dark:bg-gray-800 rounded-xl shadow-inner border border-green-100 dark:border-green-900 flex items-center justify-center p-4">
          {isLoading ? (
            <div className="flex flex-col items-center gap-4 text-gray-500 dark:text-gray-400">
              <Spinner className="w-12 h-12 text-[#10B981]"/>
              <span className="text-lg font-medium">Creating your vision...</span>
              <span className="text-sm">This might take a moment.</span>
            </div>
          ) : error ? (
            <div className="text-red-500 p-4 bg-red-50 dark:bg-red-900/30 rounded-lg">
              <p className="font-bold">Generation Failed</p>
              <p className="text-sm">{error}</p>
            </div>
          ) : generatedImage ? (
            <img src={generatedImage} alt="Generated by GreenBot" className="max-w-full max-h-full object-contain rounded-lg shadow-lg"/>
          ) : (
             <div className="flex flex-col items-center gap-2 text-gray-400 dark:text-gray-500">
                <ImageIcon className="w-16 h-16"/>
                <span className="text-lg font-medium">Your generated image will appear here</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ImageGenerator;
